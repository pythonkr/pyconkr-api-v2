"""
Django settings for pyconkr project.

Generated by 'django-admin startproject' using Django 4.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
import pathlib
import types

# Build paths inside the project like this: BASE_DIR / "subdir".
BASE_DIR = pathlib.Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-0k!2&v8q15yfhyn2sy9o(9#6lmn4a&585fa*bzc%ash3))2jyx"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
APPEND_SLASH = False

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    # add-on
    "rest_framework",
    "rest_framework.authtoken",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.github",
    "allauth.socialaccount.providers.google",
    "allauth.socialaccount.providers.kakao",
    "dj_rest_auth",
    "django_summernote",
    "constance",
    "constance.backends.database",
    # apps
    "sponsor",
    "program",
    "accounts",
    "session",
    # swagger
    "drf_spectacular",
    # cors
    "corsheaders",
    # django-import-export
    "import_export",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "pyconkr.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR / "templates",
            BASE_DIR / "accounts/templates",
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "pyconkr.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# https://django-allauth.readthedocs.io/en/latest/providers.html

SOCIALACCOUNT_PROVIDERS = {
    "github": {},
    "google": {},
    "kakao": {},
}

SITE_ID = 1

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    "django.contrib.auth.backends.ModelBackend",
    # `allauth` specific authentication methods, such as login by e-mail
    "allauth.account.auth_backends.AuthenticationBackend",
]

REST_AUTH = {
    "USE_JWT": True,
    "JWT_AUTH_COOKIE": "access_token",
    # "JWT_AUTH_SECURE": True,
    "JWT_AUTH_HTTPONLY": False,
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "ko-KR"

TIME_ZONE = "Asia/Seoul"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images) (w/ django-storages)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# django-summernote
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media/")

# django-constance
CONSTANCE_BACKEND = "constance.backends.database.DatabaseBackend"
CONSTANCE_CONFIG = {
    "SLACK_SECRET": ("", "Slack 알림 전송에 사용할 Secret"),
    "SPONSOR_NOTI_CHANNEL": ("", "후원사 변동사항에 대한 알림을 보낼 채널"),
    "CONFERENCE_PARTICIPANT_COUNT_SAT": (1700, "컨퍼런스(토) 참가자 수"),
    "CONFERENCE_PARTICIPANT_COUNT_SUN": (1700, "컨퍼런스(일) 참가자 수"),
    "IMP_KEY": ("", "포트원 REST API 키"),
    "IMP_SECRET": ("", "포트원 REST API 비밀키"),
}

# drf-spectacular
REST_FRAMEWORK = {
    # YOUR SETTINGS
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.BasicAuthentication",
        # "rest_framework.authentication.SessionAuthentication",
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "dj_rest_auth.jwt_auth.JWTCookieAuthentication",
    ),
    "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.URLPathVersioning",
    "DEFAULT_VERSION": "2023",
    "ALLOWED_VERSIONS": ["2023", "2024"],
}


SPECTACULAR_SETTINGS = {
    "TITLE": "pyconkr-api-v2",
    "DESCRIPTION": "파이콘 한국 웹서비스용 API (2023 ~ )",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": True,
    # available SwaggerUI configuration parameters
    # https://swagger.io/docs/open-source-tools/swagger-ui/usage/configuration/
    "SWAGGER_UI_SETTINGS": {
        "deepLinking": True,
        "persistAuthorization": True,
        "displayOperationId": True,
    },
    "PREPROCESSING_HOOKS": ["pyconkr.openapi.preprocessing_filter_spec"],
}


# cache for django localmem
# https://docs.djangoproject.com/en/5.1/topics/cache/#local-memory-caching
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "pyconkr-api-v2",
    }
}

# CORS_ALLOW_ALL_ORIGINS = True
CORS_ORIGIN_WHITELIST = (
    "https://2023.pycon.kr",
    "https://pycon-dev2023.pycon.kr",
    "https://pycon-prod2023.pycon.kr",
    "https://ticket-2023.pycon.kr",  # PG 심사 대비 임시 도메인
    "https://127.0.0.1:3000",
    "https://localhost:3000",
    "http://2023.pycon.kr",
    "http://pycon-dev2023.pycon.kr",
    "http://pycon-prod2023.pycon.kr",
    "http://127.0.0.1:3000",
    "http://localhost:3000",
    "http://pycon-dev2024.pycon.kr",
    "https://2024.pycon.kr",
    "http://2024.pycon.kr",
)
CORS_ALLOW_CREDENTIALS = True

# CSRF WHITE LIST
CSRF_TRUSTED_ORIGINS = tuple(CORS_ORIGIN_WHITELIST)

# OAUTH
OAUTH_GITHUB_CALLBACK_URL = "http://localhost:8000/accounts/github/login/callback/"
OAUTH_GOOGLE_CALLBACK_URL = "http://localhost:8000/accounts/google/login/callback/"

# login_required view에 로그인 되지 않은 상태로 접속할 경우 리다이렉트할 로그인 페이지를 설정합니다.
# The URL or named URL pattern where requests are redirected for login when using the login_required() decorator
LOGIN_URL = "/accounts/login/"

AWS_QUERYSTRING_AUTH = False

# External APIs
PRETALX = types.SimpleNamespace(
    API_URL=os.getenv("PRETALX_API_URL", "https://pretalx.com"),
    API_KEY=os.getenv("PRETALX_API_KEY", ""),
    EVENT_NAME={
        "2024": os.getenv("PRETALX_EVENT_TITLE_2024", "pyconkr2024"),
    },
)
